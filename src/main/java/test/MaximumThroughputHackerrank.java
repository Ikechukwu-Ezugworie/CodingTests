package test;

public class MaximumThroughputHackerrank {

    //A data processing pipeline consists of n services connected in a series where the output of the service serves as the input to the (+1) service. However, the processing units have varying latencies, and the throughput of the unit is represented by the array throughputfil in messages per minute. The first service receives input through an API, and the nth service produces the final output.
    //
    //Each service can be scaled up independently, with the cost of scaling up the th service one unit equal to scaling costli). After scaling up a service x times, it can process throughput[i]*(1+x) messages per minute.
    //
    //Given the arrays throughput and scaling cost, both of size n, and an integer
    //
    //budget representing the budget available, determine the optimal scaling
    //
    //configuration for the services such that the throughput generated by the nth
    //
    //service is maximized.
    //
    //Function Description
    //
    //Complete the function getMaximumThroughput in
    //
    //
    //getMaximum Throughput has the following parameters: int throughputin, the throughput generated by each of the n services int scaling, costin) the cost of scaling up a service one time
    //
    //int budget the available money
    //
    //Previc
    //
    //Returns
    //
    //long int the maximum value of the throughput generated at the end of the composite service after scaling within the budget

    //create a method to solve the above problem



}
